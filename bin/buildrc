build_prompt() {
  INFO="level:$BUILD_LEVEL type:$BUILD_TYPE"
  TITLE="\\[\\033]0;${BUILD_LEVEL} ${BUILD_TYPE}\\007"

  if [ "$BUILD_APP" != "browser" ]; then
    INFO="$INFO app:$BUILD_APP"
  fi

  if [ "$BUILD_TARGET" != "$BUILD_PLATFORM" ]; then
    INFO="$INFO target:$BUILD_TARGET"
  fi

  if [ "$BUILD_CHANNEL" != "default" ]; then
    INFO="$INFO channel:$BUILD_CHANNEL"
  fi

  if [ "$BUILD_SOURCE" != "trunk" ]; then
    INFO="$INFO source:$BUILD_SOURCE"
  fi

  if [ ! -x "$PROMPT_START" ]; then
    export PS1="${PROMPT_START} \[\033[1;33m\]$INFO\[\033[0m\]${PROMPT_END}${TITLE}"
  else
    export PS1="\[\033[1;33m\]$INFO\[\033[0m\]\n$DEFAULT_PROMPT${TITLE}"
  fi
}

build_app() {
  export BUILD_APP=$1
  build_prompt
}

build_source() {
  export BUILD_SOURCE=$1
  build_prompt
}

build_level() {
  export BUILD_LEVEL=$1
  build_prompt
}

build_type() {
  export BUILD_TYPE=$1
  build_prompt
}

build_target() {
  export BUILD_TARGET=$1
  build_prompt
}

build_channel() {
  export BUILD_CHANNEL=$1
  build_prompt
}

objdir() {
  cd `${BUILD_BASE}/bin/getobjdir`
}

if [ ${OSTYPE:0:5} = "linux" ]; then
  BUILD_PLATFORM=linux
elif [ ${OSTYPE:0:6} = "darwin" ]; then
  BUILD_PLATFORM=mac
else
  BUILD_PLATFORM=win
fi
export BUILD_PLATFORM

export BUILD_BASE=$(cd $(dirname "${BASH_SOURCE[0]:-$0}") && cd .. && pwd | sed -e s/\\/$//g)

if [ $BUILD_PLATFORM = "win" ]; then
  if [ $OSTYPE = "cygwin" ]; then
    VCREDIST=$(cygpath "$VCINSTALLDIR")/redist
  elif [ $OSTYPE = "msys" ]; then
    VCREDIST=$(echo $VCINSTALLDIR | sed -e s/\\\\/\\//g | sed -e s/c:/\\/c/gi)/redist
  fi

  if [ -d "$VCREDIST/x86/Microsoft.VC80.CRT" ]; then
    BUILD_REDIST=$VCREDIST/x86/Microsoft.VC80.CRT
  elif [ -d "$VCREDIST/x86/Microsoft.VC90.CRT" ]; then
    BUILD_REDIST=$VCREDIST/x86/Microsoft.VC90.CRT
  fi

  if [ -d "$VCREDIST/Debug_NonRedist/x86/Microsoft.VC80.DebugCRT" ]; then
    BUILD_REDIST_DEBUG=$VCREDIST/Debug_NonRedist/x86/Microsoft.VC80.DebugCRT
  elif [ -d "$VCREDIST/Debug_NonRedist/x86/Microsoft.VC90.DebugCRT" ]; then
    BUILD_REDIST_DEBUG=$VCREDIST/Debug_NonRedist/x86/Microsoft.VC90.DebugCRT
  fi

  export WIN32_REDIST_DIR="$BUILD_REDIST"
  export BUILD_PYTHON="${MOZILLABUILD}python\\python.exe"
else
  export BUILD_PYTHON=python
fi

export XPCOM_DEBUG_BREAK=warn
export MOZCONFIG=$BUILD_BASE/bin/entrymozconfig

if [ -z "$BUILD_APP" ]; then
  export BUILD_APP="browser"
fi
if [ -z "$BUILD_SOURCE" ]; then
  export BUILD_SOURCE="trunk"
fi
if [ -z "$BUILD_LEVEL" ]; then
  export BUILD_LEVEL="opt"
fi
if [ -z "$BUILD_TYPE" ]; then
  export BUILD_TYPE="artifact"
fi
if [ -z "$BUILD_TARGET" ]; then
  export BUILD_TARGET="$BUILD_PLATFORM"
fi
if [ -z "$BUILD_CHANNEL" ]; then
  export BUILD_CHANNEL="default"
fi

DEFAULT_PROMPT=$PS1

if [ $BUILD_PLATFORM = "mac" ]; then
  if [ $TERM_PROGRAM = "iTerm.app" ]; then
    if [ -f "$HOME/dotfiles/platforms/macos/iterm2_shell_integration.bash" ]; then
      . "$HOME/dotfiles/platforms/macos/iterm2_shell_integration.bash"
    fi
  fi

  if [ -f "/opt/homebrew/bin/mise" ]; then
    eval "$(/opt/homebrew/bin/mise activate bash)"
  fi
fi

build_prompt

export PATH=$BUILD_BASE/bin:$PATH
mkdir -p "$BUILD_BASE/source/$BUILD_SOURCE"
cd $BUILD_BASE/source/$BUILD_SOURCE

if [ $BUILD_PLATFORM = "mac" ]; then
  mach mach-completion bash -f $(brew --prefix)/etc/bash_completion.d/mach.bash-completion >/dev/null 2>/dev/null &
fi
