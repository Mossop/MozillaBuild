app() {
  export BUILD_APP=$1
}

source() {
  export BUILD_SOURCE=$1
}

level() {
  export BUILD_LEVEL=$1
}

type() {
  export BUILD_TYPE=$1
}

target() {
  export BUILD_TARGET=$1
}

channel() {
  export BUILD_CHANNEL=$1
}

if [ ${OSTYPE:0:5} = "linux" ]; then
  BUILD_PLATFORM=linux
elif [ ${OSTYPE:0:6} = "darwin" ]; then
  BUILD_PLATFORM=mac
else
  BUILD_PLATFORM=win
fi
export BUILD_PLATFORM

export BUILD_BASE=$(cd $(dirname "${BASH_SOURCE[0]}") && cd .. && pwd | sed -e s/\\/$//g)

if [ $BUILD_PLATFORM = "win" ]; then
  if [ $OSTYPE = "cygwin" ]; then
    VCREDIST=$(cygpath "$VCINSTALLDIR")/redist
  elif [ $OSTYPE = "msys" ]; then
    VCREDIST=$(echo $VCINSTALLDIR | sed -e s/\\\\/\\//g | sed -e s/c:/\\/c/gi)/redist
  fi

  if [ -d "$VCREDIST/x86/Microsoft.VC80.CRT" ]; then
    BUILD_REDIST=$VCREDIST/x86/Microsoft.VC80.CRT
  elif [ -d "$VCREDIST/x86/Microsoft.VC90.CRT" ]; then
    BUILD_REDIST=$VCREDIST/x86/Microsoft.VC90.CRT
  fi

  if [ -d "$VCREDIST/Debug_NonRedist/x86/Microsoft.VC80.DebugCRT" ]; then
    BUILD_REDIST_DEBUG=$VCREDIST/Debug_NonRedist/x86/Microsoft.VC80.DebugCRT
  elif [ -d "$VCREDIST/Debug_NonRedist/x86/Microsoft.VC90.DebugCRT" ]; then
    BUILD_REDIST_DEBUG=$VCREDIST/Debug_NonRedist/x86/Microsoft.VC90.DebugCRT
  fi

  export WIN32_REDIST_DIR="$BUILD_REDIST"
  export BUILD_PYTHON="${MOZILLABUILD}python\\python.exe"
else
  export BUILD_PYTHON=python
fi

cd $BUILD_BASE

export XPCOM_DEBUG_BREAK=warn
export MOZCONFIG=$BUILD_BASE/bin/entrymozconfig

if [ -z "$BUILD_APP" ]; then
  export BUILD_APP="browser"
fi
if [ -z "$BUILD_SOURCE" ]; then
  export BUILD_SOURCE="trunk"
fi
if [ -z "$BUILD_LEVEL" ]; then
  export BUILD_LEVEL="opt"
fi
if [ -z "$BUILD_TYPE" ]; then
  export BUILD_TYPE="artifact"
fi
if [ -z "$BUILD_TARGET" ]; then
  export BUILD_TARGET="$BUILD_PLATFORM"
fi
if [ -z "$BUILD_CHANNEL" ]; then
  export BUILD_CHANNEL="default"
fi
