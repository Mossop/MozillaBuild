#!/usr/bin/env python

import sys
import subprocess
import re
import os
import optparse
import time
import ConfigParser

# This should be run from somewhere within the git repo, it will find the
# repository root automatically
# Everything should be pretty automated, only exception is the getCVSRoot
# function that allows you to have the cvs working dir somewhere other
# than the repository.

# This function finds the CVS dir for a given repository
# Change this to suit your build environment, it should return the path to
# the mozilla directory in your cvs working dir
def getCVSRoot (repo, mozroot):
# If this is a git repository then look up the source repository
    test = os.path.join(repo, ".git")
    if os.path.exists(test):
        ini = os.path.join(test, "config")
        config = open(ini)
        line = config.readline()
        while not line == "" and not line.startswith("[remote \"origin\"]"):
            line = config.readline()
        if not line == "":
            line = config.readline()
            while not line == "":
                matches = re.match("\s*url = (\\S+)", line)
                if matches is not None:
                    cvsrepo = matches.group(1)
                    cvs = os.path.dirname(cvsrepo)
                    test = os.path.join(cvs, "mozilla")
                    if os.path.exists(test):
                        return test
                    return cvs
                line = config.readline()

# If this is a hg repository then look up the source repository
    test = os.path.join(repo, ".hg")
    if os.path.exists(test):
        ini = os.path.join(test, "hgrc")
        config = ConfigParser.ConfigParser()
        config.read(ini)
        if config.has_option("paths", "default"):
            cvs = config.get("paths", "default")
            test = os.path.join(cvs, "mozilla")
            if os.path.exists(test):
                return test
            return cvs

# Otherwise try to find a CVS dir in this repository
    test = os.path.join(mozroot, "CVS")
    if os.path.exists(test):
        return mozroot

# this function processes one "file" within the patch
def readFile (input, line):
    global mozroot
    suppress = False;
    
    # look for start of the diff command line
    while not line.startswith("diff --git"):
        # extra junk at start of file, print verbatim
        if "" == line:
            # EOF while we're not expecting it
            print >> sys.stderr, "Unexpected EOF"
            return ""
        print line[:-1]
        sys.stderr.write(":header: " + line)
        line = input.readline()
    
    # This gives us the files path from the mozilla dir
    indexRE = re.match("diff --git a(/mozilla)?(/.*?) b\\1\\2$", line[:-1])
    if indexRE is not None:
        filepath = indexRE.group(2)
    sys.stderr.write(filepath[1:] + "\n")
    if filepath.endswith("/.gitignore") or filepath.endswith("/.hgignore"):
        sys.stderr.write("Ignoring file " + filepath + "\n")
        suppress = True;
    if not suppress:
        print "Index: %s" % filepath[1:]
        # print separator and RCS file path
        print 67 * "="
        print "RCS file: /cvsroot/mozilla/%s,v" % filepath[1:]
    
        leafname = os.path.basename(filepath)
        newdate = time.gmtime()
        if cvsroot is None:
            print "diff %s %s" % (os.environ["GIT_DIFF_OPTS"], leafname)
        else:
            # find the old CVS revision
            (oldrev, olddate) = getCVSRev(filepath[1:])
            if oldrev is not None:
                print "retrieving revision %s" % oldrev     # repository revision line
                print "diff %s -p -r%s %s" % (os.environ["GIT_DIFF_OPTS"], oldrev, leafname)
            else:
                print "diff -N %s" % filepath
            newfile = os.path.join(mozroot, filepath[1:])
            if os.path.exists(newfile):
                stat = os.stat(newfile)
                newdate = time.gmtime(stat.st_mtime)

        line = input.readline()
        while line and not line.startswith("--- "):
            line = input.readline()
        if not line:
            return ""
        source = line[4:-1]
        if source == "/dev/null":
            print "--- /dev/null\t1 Jan 1970 00:00:00 -0000"
        elif cvsroot is not None and oldrev is not None:
            print "--- %s\t%s\t%s" % (filepath[1:], getCVSTime(olddate), oldrev)
        else:
            print "--- %s" % (filepath[1:])
        
        line = input.readline()
        while line and not line.startswith("+++ "):
            line = input.readline()
        if not line:
            return ""
        target = line[4:-1]
        if not target == "/dev/null":
            target = filepath[1:]
        print "+++ %s\t%s\t" % (target, getCVSTime(newdate))

    
    # Skip over extraneous crap
    line = input.readline()
    while line and not line.startswith("@@"):
        if line.startswith("Binary files "):
            if not suppress:
                if oldrev is not None:
                    print "Binary files %s and %s differ" % (leafname, leafname)
                else:
                    print "Binary files /dev/null and %s differ" % (leafname)
            return input.readline()
        line = input.readline()

    # read the @@ line holding the line number counts
    while line and line.startswith("@@"):
        old_count = 0
        new_count = 0
        countRE = re.match("@@ -\d+,(\d+) \+\d+,(\d+) @@", line)
        if countRE is not None:
            old_count = int(countRE.group(1))
            new_count = int(countRE.group(2))
        if not suppress:
            print line[:-1]
        while old_count + new_count > 0:
            line = input.readline()[:-1]
            if " " == line[:1]:
                old_count = old_count - 1
                new_count = new_count - 1
            elif "-" == line[:1]:
                old_count = old_count - 1
            elif "+" == line[:1]:
                new_count = new_count - 1
            elif "\\" == line[:1]:
                pass # "No newline at end of file" etc
            else:
                print "Invalid line type [%s] %i/%i" % (line[:1],old_count,new_count)
                sys.exit(1)
            if not suppress:
                print line
        line = input.readline()
    
    # line not a start of block, probably the next file
    # return the buffer
    return line

def getCVSTime(date):
    return `date[2]` + time.strftime(" %b %Y %H:%M:%S -0000", date);

def getCVSRev (file):
    global cvsroot
    
    if cvsroot is None:
        # we're reading a premade patch or something
        return (None, None)
    
    (path, leafname) = os.path.split(file)
    entriespath = os.path.join(cvsroot, path, "CVS", "Entries")
    if os.path.exists(entriespath):
        entries = open(entriespath)
        for line in entries.readlines():
            if line.startswith("/" + leafname + "/"):
                revRE = re.match("/[^/]+/([^/]+)/([^/]+)/", line)
                if revRE is None:
                    return (None, None)
                else:
                    return (revRE.group(1), time.strptime(revRE.group(2)))
    return (None, None)

def main ():
    global repo,mozroot,cvsroot
    
    parser = optparse.OptionParser()
    parser.add_option("-u", "--unified", dest="context",
                      help="Lines of context in diff")
    parser.add_option("-i", dest="stdin", action="store_true",
                      help="Read git diff from stdin")
    (opts, args) = parser.parse_args()

    sys.stderr.write("Generating diff....\n");

    # find the repo
    repo = os.getcwd()
    gittest = os.path.join(repo, ".git")
    hgtest = os.path.join(repo, ".hg")
    while not repo == "/" and not os.path.exists(gittest) and not os.path.exists(hgtest):
        repo = os.path.dirname(repo)
        gittest = os.path.join(repo, ".git")
        hgtest = os.path.join(repo, ".hg")
    
    if repo == "/":
        repo = None
        cvsroot = None
    else:
        mozroot = os.path.join(repo, "mozilla")
        if not os.path.exists(mozroot):
            mozroot = repo
    
        cvsroot = getCVSRoot(repo, mozroot)
    
    if opts.stdin:
        # read premade git diff from stdin
        diff = sys.stdin

    else:
        environ = os.environ

        if os.path.exists(gittest):
            # make a diff from stg
            if len(args) < 1:
                args = ["/"]

            diffargs = ""
            if opts.context is not None:
                environ["GIT_DIFF_OPTS"] = "-u" + opts.context

            stg = subprocess.Popen(
                ["stg", "diff", "-r"] + args,
                stdout = subprocess.PIPE,
                stderr = subprocess.PIPE,
                cwd = repo,
                env = environ)
            diff = stg.stdout
        else:
            hg = subprocess.Popen(
                ["hg", "qdiff", "-g"],
                stdout = subprocess.PIPE,
                stderr = subprocess.PIPE,
                cwd=repo,
                env=environ)
            diff = hg.stdout

    line = diff.readline()
    while True:
        if "" == line:
            # EOF
            break;
        line = readFile(diff, line)

main()
