#!/usr/bin/env python

import sys
import subprocess
import re
import os
import optparse
import time

# this function processes one "file" within the patch
def readFile (input, line):
    global repo
    suppress = False;
    
    # look for start of the diff command line
    while not line.startswith("diff --git"):
        # extra junk at start of file, print verbatim
        if "" == line:
            # EOF while we're not expecting it
            print >> sys.stderr, "Unexpected EOF"
            return ""
        print line[:-1]
        sys.stderr.write(":header: " + line)
        line = input.readline()
    
    # found the diff command line, pull the file name out
    sys.stderr.write(":diffcmd: " + line)
    diffcmd = line[:-1]
    indexRE = re.match("diff --git a(/mozilla)?(/.*?) b\\1\\2$", diffcmd)
    if indexRE is not None:
        filepath = indexRE.group(2)
    if filepath.endswith("/.gitignore"):
        sys.stderr.write("Ignoring file " + filepath + "\n")
        suppress = True;
    if not suppress:
        print "Index: %s" % filepath[1:]
        # print separator and RCS file path
        print 67 * "="
        print "RCS file: /cvsroot/%s/%s,v" % (repo, filepath[1:])
    
        # find the old CVS revision
        (oldrev, olddate) = getCVSRev(filepath[1:])
        if oldrev is not None:
            (dir, leafname) = os.path.split(filepath)
            print "retrieving revision %s" % oldrev     # repository revision line
            print "diff %s -p -r%s %s" % (os.environ["GIT_DIFF_OPTS"], oldrev, leafname)
            print "--- %s\t%s\t%s" % (filepath, getCVSTime(olddate), oldrev)
        else:
            print "diff -N %s" % filepath
            print "--- /dev/null\t1 Jan 1970 00:00:00 -0000"
        newfile = os.path.join(repo, filepath[1:])
        if os.path.exists(newfile):
            stat = os.stat(newfile)
            newdate = time.gmtime(stat.st_mtime)
        else:
            newdate = time.gmtime()
        print "+++ %s\t%s\t" % (filepath[1:], getCVSTime(newdate))
    
    # Skip over extraneous crap
    line = input.readline()
    while line and not line.startswith("@@"):
        line = input.readline()

    # read the @@ line holding the line number counts
    while line and line.startswith("@@"):
        old_count = 0
        new_count = 0
        countRE = re.match("@@ -\d+,(\d+) \+\d+,(\d+) @@", line)
        if countRE is not None:
            old_count = int(countRE.group(1))
            new_count = int(countRE.group(2))
        if not suppress:
            print line[:-1]
        while old_count + new_count > 0:
            line = input.readline()[:-1]
            if " " == line[:1]:
                old_count = old_count - 1
                new_count = new_count - 1
            elif "-" == line[:1]:
                old_count = old_count - 1
            elif "+" == line[:1]:
                new_count = new_count - 1
            elif "\\" == line[:1]:
                pass # "No newline at end of file" etc
            else:
                print "Invalid line type [%s] %i/%i" % (line[:1],old_count,new_count)
                sys.exit(1)
            if not suppress:
                print line
        line = input.readline()
    
    # line not a start of block, probably the next file
    # return the buffer
    return line

def getCVSTime(date):
    return `date[2]` + time.strftime(" %b %Y %H:%M:%S -0000", date);

def getCVSRev (file):
    global repo
    
    if repo is None:
        # we're reading a premade patch or something
        return ""
    
    fullpath = os.path.join(repo, file);
    (CVSdir, leafname) = os.path.split(fullpath)
    CVSdir = os.path.join(CVSdir, "CVS")
    CVSdir = os.path.join(CVSdir, "Entries")
    if os.path.exists(CVSdir):
        entries = open(CVSdir)
        for line in entries.readlines():
            if line.startswith("/" + leafname + "/"):
                revRE = re.match("/[^/]+/([^/]+)/([^/]+)/", line)
                if revRE is None:
                    return (None, None)
                else:
                    return (revRE.group(1), time.strptime(revRE.group(2)))
    return (None, None)

def main ():
    global repo
    
    parser = optparse.OptionParser()
    parser.add_option("-u", "--unified", dest="context",
                      help="Lines of context in diff")
    parser.add_option("-i", dest="stdin", action="store_true",
                      help="Read git diff from stdin")
    (opts, args) = parser.parse_args()

    if len(args) < 1:
        args = ["/"]

    sys.stderr.write("Generating diff....\n");

    if opts.stdin:
        # read premade git diff from stdin
        diff = sys.stdin
        repo = None

    else:
        # make a diff from stg
    
        repo = "mozilla"
        environ = os.environ
        
        diffargs = ""
        if opts.context is not None:
            environ["GIT_DIFF_OPTS"] = "-u" + opts.context

        stg = subprocess.Popen(
            ["stg", "diff", "-r"] + args,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            cwd = repo,
            env = environ)
        diff = stg.stdout
    
    line = diff.readline()
    while True:
        if "" == line:
            # EOF
            break;
        line = readFile(diff, line)

main()
